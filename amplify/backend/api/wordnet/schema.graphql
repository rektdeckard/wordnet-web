type WordNet @model {
  id: ID!
  nodes: [Node!]! @connection(name: "NetworkNodes")
  edges: [Edge!]! @connection(name: "NetworkEdges")
  createdAt: AWSDateTime
  modifiedAt: AWSDateTime
}

# TODO: Create a Response type that captures the complete response string,
# response time

type Node @model {
  id: ID!
  value: String!
  depth: Int
  radius: Int
  color: String
  network: WordNet! @connection(name: "NetworkNodes")
  sources: [Edge!]! @connection(name: "EdgeSource")
  targets: [Edge!]! @connection(name: "EdgeTarget")
  createdAt: AWSDateTime
}

type Edge @model {
  id: ID!
  source: Node! @connection(name: "EdgeSource")  
  target: Node! @connection(name: "EdgeTarget")
  distance: Int!
  network: WordNet! @connection(name: "NetworkEdges")
  createdAt: AWSDateTime
}

type NodeConnection {
  items: [Node!]!
  nextToken: String
}

type EdgeConnection {
  items: [Edge!]!
  nextToken: String
}

type Query {
  nodesForWordNet(id: ID!, limit: Int, nextToken: String): NodeConnection
  edgesForWordNet(id: ID!, limit: Int, nextToken: String): EdgeConnection
}

# type Mutation {
#   addEdges(id: ID!, edges:[EdgeIn])
# }